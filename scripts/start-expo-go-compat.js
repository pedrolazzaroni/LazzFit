const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');
const { networkInterfaces } = require('os');

console.log('üöÄ Iniciando Expo Go no modo de compatibilidade...');
console.log('(Esta op√ß√£o permite usar o Expo Go com SDKs mais antigas)');

function getLocalIpAddress() {
  const nets = networkInterfaces();
  const results = [];
  
  for (const name of Object.keys(nets)) {
    for (const net of nets[name]) {
      if (net.family === 'IPv4' && !net.internal) {
        results.push(net.address);
      }
    }
  }
  
  const preferred = results.find(ip => ip.startsWith('192.168'));
  return preferred || results[0];
}

try {
  // Limpar o cache primeiro para garantir uma experi√™ncia sem problemas
  console.log('\n1Ô∏è‚É£ Limpando cache do Expo...');
  
  const expoPath = path.join(process.cwd(), '.expo');
  if (fs.existsSync(expoPath)) {
    if (process.platform === 'win32') {
      execSync(`rmdir /s /q "${expoPath}"`, { stdio: 'inherit' });
    } else {
      execSync(`rm -rf "${expoPath}"`, { stdio: 'inherit' });
    }
    console.log('‚úÖ Cache do Expo removido');
  }
  
  // Obter o IP local
  const localIp = getLocalIpAddress();
  console.log(`\nüì± Seu endere√ßo IP local √©: ${localIp}`);
  
  console.log('\nüì≤ INSTRU√á√ïES PARA DISPOSITIVO F√çSICO:');
  console.log('1. Certifique-se de ter o Expo Go instalado no smartphone');
  console.log('2. Conecte seu smartphone √† MESMA rede WiFi do computador');
  console.log('3. Quando o QR code aparecer, escaneie-o com o app Expo Go');
  console.log('4. Se n√£o funcionar, insira manualmente o URL exp://SEU_IP:PORT');
  
  console.log('\n2Ô∏è‚É£ Iniciando o servidor Expo no modo de desenvolvimento cl√°ssico...');
  console.log('‚è≥ Aguarde o QR code aparecer...\n');
  
  // Usando a op√ß√£o --legacy para permitir a compatibilidade com vers√µes mais antigas do SDK
  execSync(`expo start --clear --host=${localIp} --legacy`, { stdio: 'inherit' });
  
} catch (error) {
  console.error('‚ùå Erro ao iniciar Expo:', error.message);
  
  // Tentar m√©todo alternativo
  console.log('\nüîÑ Tentando m√©todo alternativo...');
  try {
    execSync('expo start --clear --legacy', { stdio: 'inherit' });
  } catch (altError) {
    console.error('‚ùå Erro no m√©todo alternativo:', altError.message);
    process.exit(1);
  }
}
